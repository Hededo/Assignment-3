#version 410 core

// Per-vertex inputs
layout (location = 0) in vec4 position;                          
layout (location = 1) in vec4 normal;
layout (location = 2) in vec4 attributeColor;  

layout (std140) uniform constants
{
    mat4 mv_matrix;
	mat4 model_matrix;													
	mat4 view_matrix;												
	mat4 proj_matrix;												
	vec4 uni_color;		
	vec4 light_pos;									     		
	vec4 useUniformColor;	
	vec4 invertNormals;
	vec4 colorPercent;
};

out VS_OUT
{
    vec3 normal;
    vec3 view;
	vec3 useColor;
	vec4 uniColor;
} vs_out;

void main(void)
{
    vs_out.useColor = vec3(0.0, 0.0, 0.0);
	vs_out.uniColor = uni_color;
	if (useUniformColor.x == 1)
	{
		vs_out.useColor = vec3(1.0, 1.0, 1.0);	
	}

    vec4 pos_vs = mv_matrix * position;

    //vs_out.normal = normal.xyz;

	vs_out.normal = normalize(vec3(inverse(transpose(mv_matrix)) * normal));
    
	vs_out.view = vec3( -view_matrix * model_matrix * position);
	//vs_out.view = pos_vs.xyz;

    gl_Position = proj_matrix * pos_vs;
}
