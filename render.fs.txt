#version 410 core

uniform samplerCube tex_cubemap;

layout (std140) uniform constants
{
    mat4 mv_matrix;
	mat4 model_matrix;													
	mat4 view_matrix;												
	mat4 proj_matrix;												
	vec4 uni_color;		
	vec4 light_pos;									     		
	vec4 useUniformColor;	
	vec4 invertNormals;
	vec4 colorPercent;
};

in VS_OUT
{
    vec3 normal;
    vec3 view;
	vec3 useColor;
	vec4 uniColor;
} fs_in;

out vec4 color;

void main(void)
{
    // Reflect view vector about the plane defined by the normal
    // at the fragment
    vec3 reflection = reflect(fs_in.view, normalize(fs_in.normal));

	mat3 inverse_view_matrix = inverse( mat3( view_matrix ) );
    // Sample from scaled using reflection vector
    color = texture(tex_cubemap, inverse_view_matrix * inverse_view_matrix * reflection);

	if (fs_in.useColor.x == 1)
	{
	   color = mix(color, fs_in.uniColor, colorPercent.x);
	}


}
